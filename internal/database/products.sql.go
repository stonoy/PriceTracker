// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: products.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
insert into products(id, created_at, updated_at, name, url, user_id)
values ($1,$2,$3,$4,$5,$6)
RETURNING id, created_at, updated_at, name, url, user_id, base_price, current_price, last_fetched_at, priority
`

type CreateProductParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.UUID
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.BasePrice,
		&i.CurrentPrice,
		&i.LastFetchedAt,
		&i.Priority,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
delete from products
where id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const findProductsByUser = `-- name: FindProductsByUser :many
select id, created_at, updated_at, name, url, user_id, base_price, current_price, last_fetched_at, priority from products
where user_id = $1
order by updated_at desc
`

func (q *Queries) FindProductsByUser(ctx context.Context, userID uuid.UUID) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, findProductsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.UserID,
			&i.BasePrice,
			&i.CurrentPrice,
			&i.LastFetchedAt,
			&i.Priority,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductById = `-- name: GetProductById :one
select id, created_at, updated_at, name, url, user_id, base_price, current_price, last_fetched_at, priority from products
where id = $1
`

func (q *Queries) GetProductById(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.BasePrice,
		&i.CurrentPrice,
		&i.LastFetchedAt,
		&i.Priority,
	)
	return i, err
}

const getProductsToFetch = `-- name: GetProductsToFetch :many
select id, created_at, updated_at, name, url, user_id, base_price, current_price, last_fetched_at, priority from products
order by last_fetched_at asc nulls first
limit $1
`

func (q *Queries) GetProductsToFetch(ctx context.Context, limit int32) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductsToFetch, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.UserID,
			&i.BasePrice,
			&i.CurrentPrice,
			&i.LastFetchedAt,
			&i.Priority,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBasePrice = `-- name: UpdateBasePrice :one
update products
set last_fetched_at = NOW(),
updated_at = NOW(),
base_price = $1
where id = $2
RETURNING id, created_at, updated_at, name, url, user_id, base_price, current_price, last_fetched_at, priority
`

type UpdateBasePriceParams struct {
	BasePrice sql.NullInt32
	ID        uuid.UUID
}

func (q *Queries) UpdateBasePrice(ctx context.Context, arg UpdateBasePriceParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateBasePrice, arg.BasePrice, arg.ID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.BasePrice,
		&i.CurrentPrice,
		&i.LastFetchedAt,
		&i.Priority,
	)
	return i, err
}

const updateCurrentPrice = `-- name: UpdateCurrentPrice :one
update products
set last_fetched_at = NOW(),
updated_at = NOW(),
current_Price = $1
where id = $2
RETURNING id, created_at, updated_at, name, url, user_id, base_price, current_price, last_fetched_at, priority
`

type UpdateCurrentPriceParams struct {
	CurrentPrice sql.NullInt32
	ID           uuid.UUID
}

func (q *Queries) UpdateCurrentPrice(ctx context.Context, arg UpdateCurrentPriceParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateCurrentPrice, arg.CurrentPrice, arg.ID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.BasePrice,
		&i.CurrentPrice,
		&i.LastFetchedAt,
		&i.Priority,
	)
	return i, err
}

const updateProductPriority = `-- name: UpdateProductPriority :one
UPDATE products
SET priority = CASE WHEN priority THEN false ELSE true END
WHERE id = $1
RETURNING id, created_at, updated_at, name, url, user_id, base_price, current_price, last_fetched_at, priority
`

func (q *Queries) UpdateProductPriority(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProductPriority, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.BasePrice,
		&i.CurrentPrice,
		&i.LastFetchedAt,
		&i.Priority,
	)
	return i, err
}
